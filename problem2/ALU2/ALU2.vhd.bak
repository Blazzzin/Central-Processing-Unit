library ieee;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;

entity ALU2 is

	port (Clock : in std_logic;
			A, B : in unsigned(7 downto 0);
			OP : in unsigned(15 downto 0);
			Neg : out std_logic;
			R1 : out unsigned(3 downto 0);
			R2 : out unsigned(3 downto 0));
end ALU2;

Architecture calculation of ALU2 is
	signal Result : unsigned(7 DOWNTO 0);
	
	Begin
	
	Process(Clock, OP, A, B)
	Begin
		if (rising_edge(Clock)) THEN
			case OP is
				WHEN "1000000000000000" => --increment A by 2
					Result <= (A + 2);
					Neg <= '0';
				WHEN "0100000000000000" => --Shift B right by two bits
					Result <= (others => '0') & B(7 DOWNTO 0);
					Neg <= '0';
				WHEN "0010000000000000" => --shift A right by four bits
					Result <= '0' & A(7 Downto 4);
					Neg <= '0';
				WHEN "0001000000000000" => --min(A and B)
					if (A < B) THEN
						Result <= A;
						Neg <= '0';
					else
						Result <= B;
						Neg <= '0';
					end if					
				WHEN "0000100000000000" => --Rotate A by two bits
					Result <= A(1 DOWNTO 0) & A(7 DOWNTO 2);
					Neg <= '0';
				WHEN "0000010000000000" => --invert the bit significance order of B
					Result <= B(0) & B(1) & B(2) & B(3) & B(4) & B(5) & B(6) & B(7);
					Neg <= '0';
				WHEN "0000001000000000" => --XOR A and B
					Result <= (A xor B);
					Neg <= '0';
				WHEN "0000000100000000" => --summation of A and B then decrease it by 4
					Result <= ((A + B) - 4);
					Neg <= '0';
				WHEN "0000000010000000" => --all the high bits on the output
					Result <= (others => '1');
					Neg <= '0';
				WHEN OTHERS =>
					--don't care
			end case;
		end if;
	end process;
	
	R1 <= Result(3 downto 0);
	R2 <= Result(7 downto 4);
	
end calculation;